0. Javascript làm được những gì?
	- JavaScript có thể thay đổi tất cả các phần tử HTML trong trang 
	- JavaScript có thể thay đổi tất cả các thuộc tính HTML trong trang 
	- JavaScript có thể thay đổi tất cả các kiểu CSS trong trang
	- JavaScript có thể xóa các phần tử và thuộc tính HTML hiện có 
	- JavaScript có thể thêm các phần tử và thuộc tính HTML mới 
	- JavaScript có thể phản ứng với tất cả các sự kiện HTML hiện có trong trang 
	- JavaScript có thể tạo các sự kiện HTML mới trong trang
1. Khai báo biến hằng
	- var: biến toàn cục
	- let: biến khối
	- const: hằng, nếu const kiểu tham chiếu thì chỉ có thể thay đổi thành phần của nó
2. Regex
	2.1. Biểu thức(https://viblo.asia/p/hoc-regular-expression-va-cuoc-doi-ban-se-bot-kho-updated-v22-Az45bnoO5xY)
		[xyz] 	Tìm và so sánh tất cả ký tự nằm trong dấu ngoặc vuông và trùng khớp với 1 ký tự trong dấu ngoặc vuông.
					VD: [31] sẽ trùng khớp với 3 hoặc 1
						[0123456789] sẽ trùng khớp với bất kỳ một ký tự nào trong khoảng từ 0 đến 9.
		[a-z] 	So sánh và trùng khớp với một ký tự nằm trong khoảng chỉ định.
					VD: [a-z] sẽ trùng khớp với một ký tự trong khoảng từ a đến z nằm trong chuỗi cần test
						[0-9] sẽ trùng khớp với bất kỳ một ký tự nào trong khoảng từ 0 đến 9.
		[^xyz] 	So sánh và không trùng khớp với những ký tự nằm trong khoảng chỉ định. Dấu ^ (dấu mũ) nằm trong dấu ngoặc vuông là một dấu phủ định. 		 	 VD: [^a-z] sẽ không trùng khớp với tất cả các ký tự nằm trong khoảng từ a đến z.
		^ 		Trùng khớp với phần đầu của chuỗi đích.
					VD: ^a sẽ trùng khớp với chữ a trong chuỗi abc
						^\w+ sẽ trùng khớp với chữ đầu tiên – chữ "the" của chuỗi "The quick brown fox jumps over the lazy dog".
		$ 		Trùng khớp với phần cuối của chuỗi đích.
					VD: c$ sẽ trùng khớp với chữ c trong chuỗi abc
						\w+$ sẽ trùng khớp với chữ cuối – chữ "dog" của chuỗi "The quick brown fox jumps over the lazy dog".
		+ 		Trùng khớp với 1 hoặc nhiều lần ký tự đứng trước nó.
					VD: \d+ sẽ chỉ trùng với chuỗi có từ 1 con số trở lên.
		* 		Trùng khớp với 0 hoặc nhiều lần ký tự đứng trước nó
					VD: \d* sẽ trùng với chuỗi có chứa 1 chữ số hoặc k có chữ số nào cũng đc.
		? 		Trùng khớp với 0 hoặc 1 lần ký tự đứng trước nó. Tương tự như * nhưng nó lại chỉ nhân lên 1 lần. * thì nhân lên nhiều lần.
		. 		Trùng khớp với 1 ký tự đơn bất kỳ ngoại trừ ký tự ngắt dòng (line-break) và cũng không lấy được ký tự có dấu (unicode).
					VD: . sẽ trùng khớp với ký tự a hoặc b hoặc c trong chuỗi abc. Nhưng . sẽ không bắt được các chữ ă hoặc ê.
		x{n} 	Trùng khớp đúng với n lần ký tự đứng trước nó, n là một số không âm.
					VD: \d{2} sẽ bắt đc các số có 2 chữ số đứng liền nhau.
		x{n,} 	Trùng khớp với ít nhất n lần ký tự đứng trước nó, n là một số không âm.
					VD: \d{2,} sẽ bắt đc các số có từ 2 chữ số trở lên đứng liền nhau.
		x{n,m} 	Trùng khớp với ít nhất n lần và nhiều nhất là m lần ký tự đứng trước nó, n và m là một số không âm và n <= m
					VD: a{1,3} sẽ khớp với hah, haah, haaah nhưng không khớp với haaaah.
		x|y 	Trùng khớp với x hoặc y.
					VD: (slow|fast) hoặc (?:slow|fast) sẽ khớp với chữ slow hoặc fast trong chuỗi đích.
		\b 		Trùng khớp với toàn bộ ký tự đứng trước nó.
					VD: hello\b sẽ trùng khớp với toàn bộ từ hello trong chuỗi hello world nhưng sẽ không khớp với chuỗi helloworld.
		\B 		Ngược lại với \b, \B sẽ không khớp với toàn bộ mà chỉ 1 phần ký tự đứng trước nó.
					VD: hello\B sẽ trùng khớp với chữ hello trong chuỗi helloworld nhưng sẽ không khớp với chuỗi hello world.
		\d 		Trùng khớp 1 ký tự số (digit).
		\D 		Trùng khớp 1 ký tự không phải số (non-digit).
		\s 		Trùng khớp 1 ký tự khoảng trắng (whitespace) bao gồm khoảng trắng tạo ra bởi phím Tab.
		\S 		Trùng khớp với 1 ký tự không phải là khoảng trắng (non-whitespace).
		\w 		Trùng khớp với các ký tự là từ (word) bao gồm dấu _ (underscore) và chữ số.
		\W 		Trùng khớp với các ký tự không phải là từ (non-word).
					VD: \W sẽ khớp với ký tự % trong chuỗi "100%".
		\uxxxx 	Trùng khớp với 1 ký tự unicode.
					VD: \u00FA sẽ khớp với ký tự "ú", \u00F9 sẽ khớp với ký tự "ù".
		\pL 	Trùng khớp với một ký tự Unicode bất kỳ ngoại trừ dấu cách. Đây chính là cú pháp viết hoàn hảo hơn của dấu .,
					VD: \pL+ sẽ lấy được chuỗi truyền, thuyết trong chuỗi "truyền thuyết".
		(?:)

		(https://regex101.com/)
		Tuổi 1-199			
			^(?:[1-9]\d?|1\d{2})$
		Số thập phân 1-10, tối đa 2 chữ số thập phân
			^(?:\d|[0-9][,.]\d?\d|10)$ hoặc chuẩn hoá hoàn toàn ^(?:\d|10|\d[,.]\d[1-9]|\d[,.][1-9]{1,2})$
		Họ Tên(có thể tên dân tộc thiểu số như H'Hen Nie) không dấu
			^[A-Z](?:'[A-Z])?[a-z]+(?: [A-Z]('[A-Z])?[a-z]+)*$
		Email
			^\w+@[a-z]+(?:\.[a-z]+)+$
	2.2. Flags
		- d    tạo kết quả khớp chuỗi con
		- g    tìm toàn bộ
		- i    tìm không quan tâm chữ in hoa hay in thường
		- m    tìm nhiều dòng
		- s    cho phép . khớp với kí tự xuống dòng
		- u    
		- y
	2.3. Thao tác(https://viblo.asia/p/bieu-thuc-chinh-quy-regex-trong-javascript-QpmleQ9mlrd)
		- Khai báo
			+ var/let/const = /pattern/flags;
			+ var/let/const = /new Regex('pattern', 'flags');
		- Function
			+ bool regex.test('string'); kiểm tra string trùng khớp không
			+ [] regex.exec('string'); trả về mảng các xâu thuộc string trùng khớp
			+ [] string.match(regex); trả về mảng các xâu con thuộc string trùng khớp, nếu không có thì xâu chứa null
			+ int string.search(regex); trả về index của 1 xâu con trùng khớp, -1 nếu không tìm thấy
			+ void paragraph.replace(regex, string); thực hiện thay thế 1 chuỗi con khớp bằng string
			+ void paragraph.replace(regex, string); thực hiện thay thế các chuỗi con khớp bằng string
			+ [] paragraph.split(regex); thực hiện chia paragraph thành các chuỗi con mà khớp regex

3. DOM
	* Không bao giờ sử dụng document.write() sau khi document được load. Nó sẽ ghi đè lên cả document phía trên.
	3.1. Tìm phần tử
		- document.getElementById("id") tìm 1 phần tử có id là "id"
		- document.getElementsByTagName(name) tìm những phần tử có tên thẻ là name
		- document.getElementsByClassName(name) tìm những phần tử có class là name
		- tìm tất cả các phần tử HTML khớp với selector CSS được chỉ định (id, tên lớp, loại, đặc tính, giá trị của đặc tính, v.v.), sử dụng phương thức querySelectorAll().
			 VD: const x = document.querySelectorAll("p.intro"); trả về danh sách tất cả các phần tử <p> có class = "intro".
	3.2. Thay đổi phần tử
		- element.innerHTML =  "nội dung mới"
			VD: document.getElementById("id01").innerHTML = "New Heading";
		- element.attribute = "value mới"
			VD: document.getElementById("myImage").src = "landscape.jpg";
		- element.style.property = "new style"
		- element.setAttribute(attribute, "new value")
	3.3. Thêm và xoá phần tử
		- document.createElement(element)		tạo một phần tử html
		- document.removeChild(element)			xoá một phần tử html
		- document.appendChild(element)			thêm một phần tử html
		- document.replaceChild(new, old)		thay thế thẻ html
		- document.write(text)					viết(in) vào luồng ra của html
	3.4. Thêm một sự kiện
		- element.onclick = function(){code}
	3.5. Tìm đối tượng
		- document.anchors				trả về tất cả thẻ <a> có một đặc tính(attribute) name
		- document.baseURI				trả về đường dẫn tuyệt đối URI cơ sở của document
		- document.body					trả về phần tử <body>
		- document.cookie				trả về cookie của document
		- document.doctype				Trả về doctype của document
		- document.documentElement		Trả về phần tử <html>
		- document.documentMode			Trả về chế độ được sử dụng bởi trình duyệt
		- document.documentURI			Trả về đường dẫn URI document
		- document.domain				Trả về tên miền của document server
		- document.embeds				Trả về tất cả phần tử <embed>
		- document.forms				Trả về tất cả phần tử <form>
		- document.head					Trả về phần tử <head>
		- document.images				Trả về tất cả phần tử <img>
		- document.implementation		Trả về DOM implementation
		- document.inputEncoding		Trả về mã hoá của document (character set)
		- document.lastModified			Trả về ngày giờ của document lần cuối được update
		- document.links				Trả về tất cả phần tử <area> và <a> mà có một đặc tính(attribute) href
		- document.readyState			Trả về trạng thái(loading) của document
		- document.referrer				Trả về đường dẫn URI của referrer (document liên kết)
		- document.scripts				Trả về tất cả phần tử <script>
		- document.strictErrorChecking	Trả về nếu kiểm tra lỗi được thực thi
		- document.title				Trả về phần tử <title>
		- document.URL					Trả về đường dẫn URL hoàn chỉnh của document
	3.6. DOM Forms
		- type 			kiểu của phần tử input
			types: button, checkbox, color, date, datetime-local, email, file, hidden, image, month, number, password, radio, range, reset, search, submit, tel, text(mặc định), time, url, week.
		- disabled		phần tử input nên bị vô hiệu
		- max			giá trị tối đa của phần tử input
			VD: max="5"; max="2002-12-31";
		- min			giá trị tối thiểu của phần tử input
		- pattern		giá trị pattern(regex) của phần tử input
		- required		cột input bắt buộc có một phần tử(chỉ text, search, url, tel, email, password, date pickers, number, checkbox, radio, and file)
		- size			size của phần tử input
		- maxlength		số lượng kí tự tối đa của input
		- multiple		cho phép nhập nhiều phần tử(chỉ type email và file).
		- placeholder 	hiển thị mẹo ẩn mô tả giá trị mong muốn(chỉ text, search, url, tel, email, và password)
		- step			là giá trị chia hết cho step(chỉ number, range, date, datetime-local, month, time and week)
		- autofocus 	tự động focus vào input mỗi khi load
		- autocomplete 	cho phép tự động điền form
		- list 			danh sách, phải có datalist, giá trị list bằng id datalist
	3.7. DOM Event Listener
		* không dùng event có "on" , tham khảo danh sách html event (https://www.w3schools.com/jsref/dom_obj_event.asp).
		- element.addEventListener("click", function(){ alert("Hello World!"); });
		- window.addEventListener("resize", function(){
  			document.getElementById("demo").innerHTML = sometext;
		  });
	3.8. DOM Navigation
		- Trong một cây, nút đầu tiên gọi là nút gốc(node root)
		- Mọi nút(node) đều có nút cha(parentNode), ngoại trừ nút gốc
		- Một nút có thể có nhiều con(childNodes)
		- Anh chị em(sibling) là những nút có cùng cha(parentNode)

		- Tìm phần tử(element)
			+ parentNode
			+ childNodes[nodenumber]
			+ firstChild
			+ lastChild
			+ nextSibling
			+ previousSibling
				VD: document.getElementById("id01").childNodes[0],...
		- 
4. BOM